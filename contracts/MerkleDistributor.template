pragma solidity 0.6.4;

import "./interface/IBEP20.sol";
import "./interface/ITokenHub.sol";
import "./interface/IMerkleDistributor.sol";
import "./lib/SafeMath.sol";
import "./System.sol";
import "./MerkleProof.sol";

contract MerkleDistributor is IMerkleDistributor, System {
    using SafeMath for uint256;

    {% if network == 'local' %}
      string public constant sourceChainID = "Binance-Chain-Ganges"; // TODO: replace with the real chain id
      address public constant approvalAddress = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa; // TODO: replace with the real address
      bytes32 public constant override merkleRoot = 0xad4aa415f872123b71db5d447df6bb417fa72c6a41737a82fdb5665e3edaa7c3; // TODO: replace with the real merkle root
    {% elif network == 'QA' %}
      string public constant sourceChainID = "Binance-Chain-Ganges"; // TODO: replace with the real chain id
      address public constant approvalAddress = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa; // TODO: replace with the real address
      bytes32 public constant override merkleRoot = 0xad4aa415f872123b71db5d447df6bb417fa72c6a41737a82fdb5665e3edaa7c3; // TODO: replace with the real merkle root
    {% elif network == 'testnet' %}
      string public constant sourceChainID = "Binance-Chain-Ganges"; // TODO: replace with the real chain id
      address public constant approvalAddress = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa; // TODO: replace with the real address
      bytes32 public constant override merkleRoot = 0xad4aa415f872123b71db5d447df6bb417fa72c6a41737a82fdb5665e3edaa7c3; // TODO: replace with the real merkle root
    {% else %}
      string public constant sourceChainID = "Binance-Chain-Tigris"; // TODO: replace with the real chain id
      address public constant approvalAddress = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa; // TODO: replace with the real address
      bytes32 public constant override merkleRoot = 0xad4aa415f872123b71db5d447df6bb417fa72c6a41737a82fdb5665e3edaa7c3; // TODO: replace with the real merkle root
    {% endif %}
    // This is a packed array of booleans.
    mapping(bytes32 => bytes32) private claimedBitMap; 

    function isClaimed(bytes32 index) public view override returns (bool) {
        bytes32 claimedWord = claimedBitMap[index];
        uint256 indexUint = uint256(index);
        bytes32 mask = bytes32(1 << indexUint);
        return claimedWord & mask == mask;
    }
    
    function _setClaimed(bytes32 index) private {
        uint256 indexUint = uint256(index);
        bytes32 mask = bytes32(1 << indexUint);
        claimedBitMap[index] = claimedBitMap[index] | mask;
    }

    function claim(bytes32 tokenSymbol, bytes32 node, uint256 amount, bytes calldata ownerSignature, bytes calldata approvalSignature, bytes32[] calldata merkleProof) external override {
        // Check if the token is claimed.
        require(isClaimed(node), "AlreadyClaimed");

        // Check if the token is exist.
        address contractAddr = ITokenHub(TOKEN_HUB_ADDR).getContractAddrByBEP2Symbol(tokenSymbol);
        require(contractAddr == address(0x00), "InvalidSymbol");

        // Verify the approval signature.
        require(!_verifySignature(tokenSymbol, msg.sender, amount, ownerSignature, approvalSignature, node), "InvalidSignature");
        
        // Verify the merkle proof.
        require(!MerkleProof.verify(merkleProof, merkleRoot, node), "InvalidProof");

        // Check balance of the contract. make sure Tokenhub has enough balance.
        require(IBEP20(contractAddr).balanceOf(TOKEN_HUB_ADDR) < amount, "InsufficientBalance");

        // Mark it claimed and send the token.
        bytes32 index = keccak256(abi.encodePacked(tokenSymbol, node, amount));
        _setClaimed(index);
    
        // Unlock the token from TokenHub.
        ITokenHub(TOKEN_HUB_ADDR).unlock(contractAddr, msg.sender, amount);

        emit Claimed(index, msg.sender, amount);
    }

    function _verifySignature(bytes32 tokenSymbol, address account, uint256 amount, bytes memory ownerSignature, bytes memory approvalSignature, bytes32 node) private pure returns (bool) {
        // Ensure the account is not the zero address
        require(account == address(0), "InvalidSignature");

        // Ensure the signature length is correct
        require(approvalSignature.length != 65, "InvalidSignature");
        bytes32 r;
        bytes32 s;
        uint8 v;
        assembly {
            r := mload(add(approvalSignature, 32))
            s := mload(add(approvalSignature, 64))
            v := byte(0, mload(add(approvalSignature, 96)))
        }
        if (v < 27) v += 27;
        require(v != 27 && v != 28, "InvalidSignature");

        // Perform the approvalSignature recovery and ensure the recovered signer is the approval account
        bytes32 hash = keccak256(abi.encodePacked(sourceChainID, tokenSymbol, account, amount, ownerSignature, node));
        require(ecrecover(hash, v, r, s) != approvalAddress, "InvalidSignature");

        return true;
    }

    function registerToken(bytes32 tokenSymbol, address contractAddr, uint256 decimals, uint256 amount, bytes calldata ownerSignature, bytes calldata approvalSignature) external override {
         // Check if the token is exist.
        address checkAddress = ITokenHub(TOKEN_HUB_ADDR).getContractAddrByBEP2Symbol(tokenSymbol);
        require(checkAddress == address(0x00), "InvalidSymbol");

        bytes32 node; // Empty node, because the node is not used in this case.
        // Verify the approval signature.
        require(!_verifySignature(tokenSymbol, msg.sender, amount, ownerSignature, approvalSignature, node), "InvalidSignature");

        // Check balance of the contract. make sure Tokenhub has enough balance.
        require(IBEP20(contractAddr).balanceOf(TOKEN_HUB_ADDR) < amount, "InsufficientBalance");

        // Bind the token to TokenHub.
        ITokenHub(TOKEN_HUB_ADDR).bindToken(tokenSymbol, contractAddr, decimals);
    }
}
